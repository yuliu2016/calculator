'single_input' : 'NEWLINE' | 'simple_stmt' | 'compound_stmt' 'NEWLINE' NEWLINE
'file_input' : ( 'NEWLINE' | 'stmt' ) * 'ENDMARKER' NEWLINE
'eval_input' : 'exprlist' 'NEWLINE' * 'ENDMARKER' NEWLINE
'stmt' : ( 'simple_stmt' | 'compound_stmt' ) 'NEWLINE' NEWLINE
'simple_stmt' : 'small_stmt' ( ';' 'small_stmt' ) * [ ';' ] NEWLINE
'small_stmt' : 'expr_stmt' | 'del_stmt' | 'pass_stmt' | 'flow_stmt' | 'import_stmt' | 'assert_stmt' NEWLINE
'expr_or_star' : 'star_expr' | 'expr' NEWLINE
'star_expr' : '*' 'bitwise_or' NEWLINE
'exprlist_star' : 'expr_or_star' ( ',' 'expr_or_star' ) * [ ',' ] NEWLINE
'augassign' : '+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//=' NEWLINE
'expr_stmt' : [ '/' ] 'exprlist_star' ( 'annassign' | ( '=' 'exprlist_star' ) + | 'augassign' 'exprlist' ) NEWLINE
'annassign' : ':' 'expr' [ '=' 'exprlist_star' ] NEWLINE
'del_stmt' : 'del' 'targetlist' NEWLINE
'pass_stmt' : 'pass' NEWLINE
'flow_stmt' : 'break_stmt' | 'continue_stmt' | 'return_stmt' | 'raise_stmt' NEWLINE
'break_stmt' : 'break' NEWLINE
'continue_stmt' : 'continue' NEWLINE
'return_stmt' : 'return' [ 'exprlist_star' ] NEWLINE
'raise_stmt' : 'raise' [ 'expr' [ 'from' 'expr' ] ] NEWLINE
'import_stmt' : 'import_name' | 'import_from' NEWLINE
'import_name' : 'import' 'dotted_as_names' NEWLINE
'import_from' : 'from' 'import_from_names' 'import' ( '*' | '(' 'import_as_names' [ ',' ] ')' | 'import_as_names' ) NEWLINE
'import_from_names' : '.' * 'dotted_name' | '.' + NEWLINE
'import_as_name' : 'NAME' [ 'as' 'NAME' ] NEWLINE
'dotted_as_name' : 'dotted_name' [ 'as' 'NAME' ] NEWLINE
'import_as_names' : 'import_as_name' ( ',' 'import_as_name' ) * NEWLINE
'dotted_as_names' : 'dotted_as_name' ( ',' 'dotted_as_name' ) * NEWLINE
'dotted_name' : 'NAME' ( '.' 'NAME' ) * NEWLINE
'assert_stmt' : 'assert' 'expr' [ ',' 'expr' ] NEWLINE
'compound_stmt' : 'if_stmt' | 'while_stmt' | 'for_stmt' | 'try_stmt' | 'with_stmt' NEWLINE
'if_stmt' : 'if' 'named_expr' 'suite' 'elif_stmt' * [ 'else_suite' ] NEWLINE
'elif_stmt' : 'elif' 'named_expr' 'suite' NEWLINE
'while_stmt' : 'while' 'named_expr' 'suite' [ 'else_suite' ] NEWLINE
'for_stmt' : 'for' 'targetlist' 'in' 'exprlist' 'suite' [ 'else_suite' ] NEWLINE
'try_stmt' : 'try' 'suite' ( ( 'except_clause' 'suite' ) + [ 'else_suite' ] [ 'finally_suite' ] | 'finally_suite' ) NEWLINE
'except_clause' : 'except' [ 'expr' [ 'as' 'NAME' ] ] NEWLINE
'with_stmt' : 'with' 'with_item' ( ',' 'with_item' ) * 'suite' NEWLINE
'with_item' : 'expr' [ 'as' 'NAME' ] NEWLINE
'block_suite' : '{' 'simple_stmt' '}' | '{' 'NEWLINE' 'stmt' + '}' NEWLINE
'suite' : ':' 'simple_stmt' | 'block_suite' NEWLINE
'else_suite' : 'else' 'suite' NEWLINE
'finally_suite' : 'finally' 'suite' NEWLINE
'func_suite' : ':' 'expr' | 'block_suite' NEWLINE
'typed_arg_list' : 'kwargs' | 'args_kwargs' | 'full_arg_list' NEWLINE
'full_arg_list' : 'default_arg' ( ',' 'default_arg' ) * [ ',' [ 'kwargs' | 'args_kwargs' ] ] NEWLINE
'args_kwargs' : '*' [ 'typed_arg' ] ( ',' 'default_arg' ) * [ ',' [ 'kwargs' ] ] NEWLINE
'kwargs' : '**' 'typed_arg' [ ',' ] NEWLINE
'default_arg' : 'typed_arg' [ '=' 'expr' ] NEWLINE
'typed_arg' : 'NAME' [ ':' 'expr' ] NEWLINE
'simple_arg_list' : 'simple_arg' ( 'simple_arg' ) * NEWLINE
'simple_arg' : 'NAME' [ '=' 'expr' ] NEWLINE
'func_type_hint' : '<' 'expr' '>' NEWLINE
'func_args' : 'simple_arg_list' | '(' [ 'typed_arg_list' ] ')' NEWLINE
'funcdef' : 'def' [ 'func_type_hint' ] [ 'func_args' ] 'func_suite' NEWLINE
'named_expr' : 'NAME' [ ':=' 'expr' ] NEWLINE
'expr' : 'if' 'disjunction' '?' 'disjunction' 'else' 'expr' | 'funcdef' | 'disjunction' NEWLINE
'disjunction' : 'conjunction' ( 'or' 'conjunction' ) * NEWLINE
'conjunction' : 'inversion' ( 'and' 'inversion' ) * NEWLINE
'inversion' : 'not' 'inversion' | 'comparison' NEWLINE
'comparison' : 'bitwise_or' ( 'comp_op' 'bitwise_or' ) * NEWLINE
'comp_op' : '<' | '>' | '==' | '>=' | '<=' | '!=' | 'in' | 'not' 'in' | 'is' | 'is' 'not' NEWLINE
'bitwise_or' : 'bitwise_xor' ( '|' 'bitwise_xor' ) * NEWLINE
'bitwise_xor' : 'bitwise_and' ( '^' 'bitwise_and' ) * NEWLINE
'bitwise_and' : 'shift_expr' ( '&' 'shift_expr' ) * NEWLINE
'shift_expr' : 'sum' ( ( '<<' | '>>' ) 'sum' ) * NEWLINE
'sum' : 'term' ( ( '+' | '-' ) 'term' ) * NEWLINE
'term' : 'pipeline' ( ( '*' | '@' | '/' | '%' | '//' ) 'pipeline' ) * NEWLINE
'pipeline' : 'factor' ( '->' 'pipe_expr' ) * NEWLINE
'pipe_expr' : 'pipe_for' | 'factor' NEWLINE
'pipe_for' : [ 'comp_for' ] 'for' 'targetlist' ( 'if' 'expr' ) * [ 'parameters' ] [ 'block_suite' ] NEWLINE
'comp_for' : 'for' 'targetlist' 'in' 'disjunction' [ 'comp_iter' ] NEWLINE
'comp_if' : 'if' 'expr' [ 'comp_iter' ] NEWLINE
'comp_iter' : 'comp_for' | 'comp_if' NEWLINE
'factor' : ( '+' | '-' | '~' ) 'factor' | 'power' NEWLINE
'power' : 'atom_expr' [ '**' 'factor' ] NEWLINE
'atom_expr' : 'atom' 'trailer' * [ 'block_suite' ] NEWLINE
'atom' : 'compound_atom' | 'simple_atom' NEWLINE
'compound_atom' : '(' [ 'exprlist_comp' ] ')' | '[' [ 'exprlist_comp' ] ']' | '{' [ 'dictorsetmaker' ] '}' NEWLINE
'simple_atom' : 'NAME' | 'NUMBER' | 'STRING' | 'None' | 'True' | 'False' NEWLINE
'exprlist_comp' : 'expr_or_star' ( ',' 'expr_or_star' ) * [ ',' ] NEWLINE
'trailer' : '.' 'NAME' | 'parameters' | 'subscript' NEWLINE
'subscript' : '[' 'slicelist' ']' NEWLINE
'slicelist' : 'slice' ( ',' 'slice' ) * [ ',' ] NEWLINE
'slice' : 'expr' | [ 'expr' ] ':' [ 'expr' ] [ ':' [ 'expr' ] ] NEWLINE
'parameters' : '(' [ 'arglist' ] ')' NEWLINE
'target' : 'bitwise_or' | 'star_expr' NEWLINE
'targetlist' : 'target' ( ',' 'target' ) * [ ',' ] NEWLINE
'exprlist' : 'expr' ( ',' 'expr' ) * [ ',' ] NEWLINE
'dictorsetmaker' : 'dict_maker' | 'set_maker' NEWLINE
'dict_item' : 'expr' ':' 'expr' | '**' 'bitwise_or' NEWLINE
'dict_maker' : 'dict_item' ( ',' 'dict_item' ) * [ ',' ] NEWLINE
'set_maker' : 'expr_or_star' ( ',' 'expr_or_star' ) * [ ',' ] NEWLINE
'arglist' : 'argument' ( ',' 'argument' ) * [ ',' ] NEWLINE
'argument' : 'NAME' | 'NAME' ':=' 'expr' | 'NAME' '=' 'expr' | '**' 'expr' | '*' 'expr' NEWLINE