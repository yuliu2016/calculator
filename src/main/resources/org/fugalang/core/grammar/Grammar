# Grammar for Fuga

single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
file_input: (NEWLINE | stmt)*
eval_input: testlist NEWLINE*

# Statements
stmt: (simple_stmt | compound_stmt) NEWLINE
simple_stmt: small_stmt (';' small_stmt)* [';']

# Small Statements
small_stmt: expr_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | assert_stmt

testlist_star_expr: (test | star_expr) (',' (test | star_expr))* [',']
augassign: ('+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//=')
expr_stmt: testlist_star_expr [augassign testlist | ('=' testlist_star_expr)*]

del_stmt: 'del' exprlist
pass_stmt: 'pass'

flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt
break_stmt: 'break'
continue_stmt: 'continue'
return_stmt: 'return' [testlist_star_expr]
raise_stmt: 'raise' [test ['from' test]]

import_stmt: import_name | import_from
import_name: 'import' dotted_as_names
import_from: ('from' (('.')* dotted_name | ('.')+) 'import' ('*' | '(' import_as_names ')' | import_as_names))
import_as_name: NAME ['as' NAME]
dotted_as_name: dotted_name ['as' NAME]
import_as_names: import_as_name (',' import_as_name)* [',']
dotted_as_names: dotted_as_name (',' dotted_as_name)* [',']
dotted_name: NAME ('.' NAME)*

assert_stmt: 'assert' test [',' test]

# Compound statements
compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt
if_stmt: 'if' namedexpr_test suite ('elif' namedexpr_test suite)* ['else' suite]
while_stmt: 'while' namedexpr_test suite ['else' suite]
for_stmt: 'for' exprlist 'in' testlist suite ['else' suite]
try_stmt: ('try' suite ((except_clause suite)+ ['else' suite] ['finally' suite] | 'finally' suite))
# NB compile.c makes sure that the default except clause is last
except_clause: 'except' [test ['as' NAME]]
with_stmt: 'with' with_item (',' with_item)* suite
with_item: test ['as' expr]

suite: ':' simple_stmt | '{' simple_stmt '}' | '{' NEWLINE stmt+ '}'

# Function definitions

varargslist: vfpdef ['=' test] (',' vfpdef ['=' test])*
vfpdef: NAME

lambdef: 'def' [varargslist] '=>' test
parameters: '(' [varargslist] ')'
funcdef: 'def' parameters suite

# Test and Expressions

namedexpr_test: test [':=' test]

test: or_test ['?' or_test ':' test] | lambdef | funcdef

or_test: and_test ('or' and_test)*
and_test: not_test ('and' not_test)*
not_test: 'not' not_test | comparison
comparison: expr (comp_op expr)*
comp_op: '<'|'>'|'=='|'>='|'<='|'!='|'in'|'not' 'in'|'is'|'is' 'not'
star_expr: '*' expr
expr: xor_expr ('|' xor_expr)*
xor_expr: and_expr ('^' and_expr)*
and_expr: shift_expr ('&' shift_expr)*
shift_expr: arith_expr (('<<'|'>>') arith_expr)*
arith_expr: term (('+'|'-') term)*
term: factor (('*'|'@'|'/'|'%'|'//') factor)*
factor: ('+'|'-'|'~') factor | power
power: pipe_expr ['**' factor]
pipe_expr: atom_expr ('->' atom_expr)*

# Atoms

atom_expr: atom trailer*
atom: compound_atom | simple_atom
compound_atom: '(' [testlist_comp] ')' | '[' [testlist_comp] ']' | '{' [dictorsetmaker] '}'
simple_atom: NAME | NUMBER | STRING+ | 'None' | 'True' | 'False'

testlist_comp: (namedexpr_test|star_expr) ( comp_for | (',' (namedexpr_test|star_expr))* [','] )

trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
subscriptlist: subscript (',' subscript)* [',']
subscript: test | [test] ':' [test] [sliceop]
sliceop: ':' [test]

exprlist: (expr|star_expr) (',' (expr|star_expr))* [',']
testlist: test (',' test)* [',']

dictorsetmaker: dict_maker | set_maker

dict_maker: (test ':' test | '**' expr) (comp_for | (',' (test ':' test | '**' expr))* [','])
set_maker: (test | star_expr) (comp_for | (',' (test | star_expr))* [','])

arglist: argument (',' argument)*  [',']
argument: (NAME [comp_for] | NAME ':=' test | NAME '=' test | '**' test | '*' test)

comp_iter: comp_for | comp_if
comp_for: 'for' exprlist 'in' or_test [comp_iter]
comp_if: 'if' test [comp_iter]