# Grammar for Fuga

single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
file_input: (NEWLINE | stmt)* ENDMARKER
eval_input: exprlist NEWLINE* ENDMARKER

# Statements
stmt: (simple_stmt | compound_stmt) NEWLINE
simple_stmt: small_stmt (';' small_stmt)* [';']

# Small Statements
small_stmt: expr_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | assert_stmt

expr_or_star: star_expr | expr
star_expr: '*' bitwise_or
exprlist_star: expr_or_star (',' expr_or_star)* [',']
augassign: '+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//='
expr_stmt: ['/'] exprlist_star (annassign | ('=' exprlist_star)+ | augassign exprlist)
annassign: ':' expr ['=' exprlist_star]

del_stmt: 'del' targetlist
pass_stmt: 'pass'

flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt
break_stmt: 'break'
continue_stmt: 'continue'
return_stmt: 'return' [exprlist_star]
raise_stmt: 'raise' [expr ['from' expr]]

import_stmt: import_name | import_from
import_name: 'import' dotted_as_names
import_from: 'from' import_from_names 'import' ('*' | '(' import_as_names [','] ')' | import_as_names)
import_from_names: '.'* dotted_name | '.'+
import_as_name: NAME ['as' NAME]
dotted_as_name: dotted_name ['as' NAME]
import_as_names: import_as_name (',' import_as_name)*
dotted_as_names: dotted_as_name (',' dotted_as_name)*
dotted_name: NAME ('.' NAME)*

assert_stmt: 'assert' expr [',' expr]

# Compound statements

compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt
if_stmt: 'if' named_expr suite ('elif' named_expr suite)* [else_suite]
while_stmt: 'while' named_expr suite [else_suite]
for_stmt: 'for' targetlist 'in' exprlist suite [else_suite]
try_stmt: 'try' suite ((except_clause suite)+ [else_suite] [finally_suite] | finally_suite)
except_clause: 'except' [expr ['as' NAME]]
with_stmt: 'with' with_item (',' with_item)* suite
with_item: expr ['as' NAME]

block_suite:  '{' simple_stmt '}' | '{' NEWLINE stmt+ '}'
suite: ':' simple_stmt | block_suite
else_suite: 'else' suite
finally_suite: 'finally' suite
func_suite: ':' expr | block_suite

# Function definitions

typed_arg_list: kwargs | args_kwargs | full_arg_list
full_arg_list: default_arg (','  default_arg)* [','  [kwargs | args_kwargs]]
args_kwargs: '*' [typed_arg] (','  default_arg)* [','  [kwargs]]
kwargs: '**' typed_arg [',']
default_arg: typed_arg ['=' expr]
typed_arg: NAME [':' expr]

simple_arg_list: simple_arg (simple_arg)*
simple_arg: NAME ['=' expr]

funcdef: 'def' [simple_arg_list | '(' [typed_arg_list] ')'] func_suite

# Expressions

named_expr: NAME [':=' expr]
expr: 'if' disjunction '?' disjunction 'else' expr | funcdef | disjunction
disjunction: conjunction ('or' conjunction)*
conjunction: inversion ('and' inversion)*
inversion: 'not' inversion | comparison
comparison: bitwise_or (comp_op bitwise_or)*
comp_op: '<'|'>'|'=='|'>='|'<='|'!='|'in'|'not' 'in'|'is'|'is' 'not'
bitwise_or: bitwise_xor ('|' bitwise_xor)*
bitwise_xor: bitwise_and ('^' bitwise_and)*
bitwise_and: shift_expr ('&' shift_expr)*
shift_expr: sum (('<<'|'>>') sum)*
sum: term (('+'|'-') term)*
term: pipeline (('*'|'@'|'/'|'%'|'//') pipeline)*
pipeline: factor ('->' pipe_expr)*
pipe_expr: pipe_for | factor

pipe_for: [comp_for] 'for' targetlist ('if' expr)* [parameters] [block_suite]
comp_for: 'for' targetlist 'in' disjunction [comp_iter]
comp_if: 'if' expr [comp_iter]
comp_iter: comp_for | comp_if

factor: ('+'|'-'|'~') factor | power
power: atom_expr ['**' factor]

# Atoms

atom_expr: atom trailer* [block_suite]
atom: compound_atom | simple_atom
compound_atom: '(' [exprlist_comp] ')' | '[' [exprlist_comp] ']' | '{' [dictorsetmaker] '}'
simple_atom: NAME | NUMBER | STRING | 'None' | 'True' | 'False'

exprlist_comp: expr_or_star (',' expr_or_star)* [',']

trailer: '.' NAME | parameters | subscript
subscript: '[' slicelist ']'
slicelist: slice (',' slice)* [',']
slice: expr | [expr] ':' [expr] [':' [expr]]
parameters: '(' [arglist] ')'

target: bitwise_or | star_expr
targetlist: target (',' target)* [',']
exprlist: expr (',' expr)* [',']

dictorsetmaker: dict_maker | set_maker

dict_item: expr ':' expr | '**' bitwise_or
dict_maker: dict_item (',' dict_item)* [',']
set_maker: expr_or_star (',' expr_or_star)* [',']

arglist: argument (',' argument)*  [',']
argument: NAME | NAME ':=' expr | NAME '=' expr | '**' expr | '*' expr
