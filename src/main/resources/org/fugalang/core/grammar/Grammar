# Grammar for Fuga

file_input: (NEWLINE | stmt)*
eval_input: testlist NEWLINE*

# Statements
stmt: (simple_stmt | compound_stmt) NEWLINE
simple_stmt = small_stmt (';' small_stmt)* [';']

# Small Statements
small_stmt: expr_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | assert_stmt

testlist_star_expr: (test | star_expr) (',' (test | star_expr))* [',']
augassign: ('+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//=')
expr_stmt = testlist_star_expr [('=' testlist_star_expr)* | augassign testlist]

del_stmt: 'del' exprlist
pass_stmt: 'pass'

flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
break_stmt: 'break'
continue_stmt: 'continue'
return_stmt: 'return' [testlist_star_expr]
yield_stmt: yield_expr
raise_stmt: 'raise' [test ['from' test]]

import_stmt: import_name | import_from
import_name: 'import' dotted_as_names
import_from: ('from' (('.')* dotted_name | ('.')+) 'import' ('*' | '(' import_as_names ')' | import_as_names))
import_as_name: NAME ['as' NAME]
dotted_as_name: dotted_name ['as' NAME]
import_as_names: import_as_name (',' import_as_name)* [',']
dotted_as_names: dotted_as_name (',' dotted_as_name)* [',']
dotted_name: NAME ('.' NAME)*

assert_stmt: 'assert' test [',' test]

# Compound statements
compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt
if_stmt: 'if' namedexpr_test suite ('elif' namedexpr_test suite)* ['else' suite]
while_stmt: 'while' namedexpr_test suite ['else' suite]
for_stmt: 'for' exprlist 'in' testlist suite ['else' suite]
try_stmt: ('try' suite ((except_clause suite)+ ['else' suite] ['finally' suite] | 'finally' suite))
# NB compile.c makes sure that the default except clause is last
except_clause: 'except' [test ['as' NAME]]
with_stmt: 'with' with_item (',' with_item)* suite
with_item: test ['as' expr]

closure =  '{' simple_stmt '}' | '{' NEWLINE stmt+ '}'
suite: ':' simple_stmt | closure


