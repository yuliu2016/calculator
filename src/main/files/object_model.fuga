/**
The Fuga Object Model

Fuga is based on objects. An object has a type and a value.

*/


class = def(classdef) {
    if sys.has_feature("fast_class") {
        return fast_class(classdef)
    }
    scope = classdef.__scope__()
    scope.run()
    for i in scope.locals() {
        if
    }

    cls = def(*constructer_args, **constructer_kwargs) {
        ob = object()
        ob.__dict__
    }
}


sum_odd_digits = def n {
    return n
        -> str
        -> map(int)
        -> print
        -> filter(def x: x % 2 == 1)
        -> sum
}

hi = async def x {
}

range(1000)
    -> map(def d: x * x)
    -> print
    -> filter(def x: x % 2 == 0)
    -> list
    -> print

def print(*args, file=stdout, end="\n") {
    return args
}

range(1000) -> assoc(def k: k * k) -> print
range(1000) -> map(def x: x - 1) -> set -> sorted -> each(print)

[d for d in a for a in g if a == 5]

g -> flatten() -> list

[k for k in range(6)]
range(6) -> map(def x: if 4 > x ? 2 else 0)

b = class {
   init {
       self.a = 1
       self.b = 1
   }

   a = def(self) {
   }

   b = def(cls) {
   }

   c = 1

   d = def()
}

Person = dataclass {
    name: int,
    age: int,

}

# for expressions
range(1000) -> map(def x: x, x ** 2) -> for x, squared if x != 10 {
    print("The square of " + x + " is " + y)
}

a = {"Apple": [12, 4, 7], "Orange": [5, 9, 8], "Banana": [4, 9, -3]}

# Python
{k: [n for n in v if n % 2 == 1] for k, v in a.items() if k.endswith("e")}
# Result: {"Apple": [7], "Orange": [5, 9]}

# Fuga
a -> items
    -> for k, v if k.endswith("e")
    -> map(def k, v: k, v -> for n if n % 2 == 1 -> list)
    -> dict

[[1], [2]] -> for j in k for k {j, k} -> dict

dict(for j in k for k in [[1], [2]] {j, k})

a -> j * 4 for j -> list

c = {1: 2, 3: 4}

# c = [1:5] -> {x: x + 1 for x}

range(1, 5) -> for(print) -> list

for n in range(1, 5): print(n)

# greedy evaluation
[1, 2, 3] -> for x { x * x } -> for(print) -> for { print("hi") }

# lazy evaluation
[1, 2, 3] -> map(def x: x * x) -> map(print) -> map { print("hi") }