# Calculator Grammar

.include ('include/ast2.h')
.fdecl ()

sum[double *] (left_recursive):
    | sum '+' term >> { binop_add(p, %a, %b) }
    | sum '-' term >> { binop_sub(p, %a, %b) }
    | term { a }
term[double *] (left_recursive):
    | term '*' factor >> { binop_mul(p, %a, %b) }
    | term '/' factor >> { binop_div(p, %a, %b) }
    | term '%' factor >> { binop_mod(p, %a, %b) }
    | factor { a }
factor[double *] (memo):
    | '+' factor >> { a }
    | '-' factor >> { unary_minus(p, %a) }
    | '~' factor >> { unary_not(p, %a) }
    | power { a }
power[double *] (memo):
    | atom '**' factor >> { binop_pow(p, %a, %b) }
    | atom { a }
parameters[ast_list_t *]:
    | ','.sum+ [','] { a }
atom[double *] (memo):
    | '(' sum ')' >> { a }
    | NAME '(' [parameters] ')' >> { call_func(p, %a, %b) }
    | NAME { load_const(p, %a) }
    | NUMBER { to_double(p, %a) }

```c
// Parser Entry Point
double *parse_calc(parser_t *p) {
    return sum(p);
}
```