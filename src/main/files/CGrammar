# Grammar for Fuga

.include ('include/ast.h')
.include ('include/internal/static_parser.h')
.fdecl ()

```c
// Placeholder node
static inline void *node() {
    return palloc(sizeof(char));
}

// Do nothing operation
static ast_stmt_t *ast_nop() {
    return node();
}
```

single_input[ast_list_t *]:
    | NEWLINE { _ast_list_of(ast_nop()) }
    | simple_statements { _ast_list_of(%a) }
    | compound_statement NEWLINE { _ast_list_of(%a) }
file_input[ast_list_t *]:
    | statement_list { a }
eval_input[ast_list_t *]:
    | expressions [NEWLINE] { a }

# Statements
statement_list[ast_list_t *]:
    | line_statement+ { a }
line_statement[ast_list_t *]:
    | simple_statements NEWLINE { a }
    | compound_statement NEWLINE { _ast_list_of(%a) }

simple_statements[ast_list_t *]:
    | ';'.simple_statement+ [';'] { a }

```c
static ast_stmt_t *ast_break() {
    return node();
}

static ast_stmt_t *ast_continue() {
    return node();
}

static ast_stmt_t *ast_del(ast_list_t *li) {
    return node();
}

static ast_stmt_t *ast_return(ast_list_t *li) {
    return node();
}

static ast_named_t *ast_named(token_t *name, ast_expr_t *expr) {
    return node();
}
```

# Small Statements
simple_statement[ast_stmt_t *]:
    | assignment { a }
    | starred_expressions { node() }
    | 'pass' { ast_nop() }
    | 'break' { ast_break() }
    | 'continue' { ast_continue() }
    | 'return' [starred_expressions] >> { ast_return(%a) }
    | 'raise' expression ['from' expression >> [ast_expr_t *]
        { a }] >> { ast_nop() }
    | 'del' targets >> { ast_del(%a) }


# Targets

target (memo):
    | t_primary '.' NAME !t_lookahead >> { node() }
    | t_primary subscript !t_lookahead >> { node() }
    | NAME
t_primary[ast_primary_t *] (left_recursive):
    | t_primary '.' NAME &t_lookahead >> { node() }
    | t_primary invocation &t_lookahead >> { node() }
    | t_primary subscript &t_lookahead >> { node() }
    | atom &t_lookahead >> { a }
t_lookahead[void *] (inline):
    | '.'
    | '('
    | '['

targets[ast_list_t *]:
    | ','.target+ [','] { a }


# Assignments

assignment:
    | target ':' expression ['=' expressions >> { a }] >> { node() }
    | (targets '=' >> { a })+ starred_expressions >> { node() }
    | target augmented_assign expressions >> { node() }

augmented_assign[int] (inline):
    | '+='  { BINOP_PLS }
    | '-='  { BINOP_MIN }
    | '*='  { BINOP_MUL }
    | '/='  { BINOP_DIV }
    | '%='  { BINOP_MOD }
    | '@='  { BINOP_MML }
    | '|='  { BINOP_IOR }
    | '&='  { BINOP_AND }
    | '^='  { BINOP_XOR }
    | '//=' { BINOP_FDV }
    | '**=' { BINOP_POW }
    | '<<=' { BINOP_SHL }
    | '>>=' { BINOP_SHR }


# Compound statements

compound_statement:
    | if_statement
    | while_statement
    | for_statement
    | try_statement
    | with_statement

if_statement:
    | 'if' named_expression suite elif_statement* [else_suite]
elif_statement:
    | 'elif' named_expression suite
while_statement:
    | 'while' named_expression suite [else_suite]
for_statement:
    | 'for' targets 'in' expressions suite [else_suite]
try_statement:
    | 'try' suite (except_suite | finally_suite)
with_statement:
    | 'with' ','.expression_as_name+ suite
expression_as_name:
    | expression ['as' NAME >> [token_t *]{ a }]

# Suites

block_suite:
    | '{' NEWLINE statement_list '}' { b }
    | '{' [simple_statements] '}' { a }
suite:
    | ':' simple_statements { a }
    | block_suite { a }
else_suite (inline):
    | 'else' suite { a }
finally_suite (inline):
    | 'finally' suite { a }
except_clause:
    | 'except' [expression_as_name] suite
except_suite:
    | except_clause+ [else_suite] [finally_suite]

# Invocation and Subscripts

invocation:
    | '(' [','.call_argument+  [','] { a } ] ')' { a }
call_argument:
    | NAME ':=' expression >> { ast_named(%a, %b) }
    | NAME '=' expression >> { ast_named(%a, %b) }
    | '**' expression >> { a }
    | '*' expression >> { a }
    | expression { a }

subscript[ast_list_t *]:
    | '[' ','.slice+ [','] ']' { a }
slice:
    | [expression] slice_expression [slice_expression]
    | expression
slice_expression:
    | ':' [expression] { a }


# Expressions

expressions[ast_list_t *]:
    | ','.expression+ [','] { a }
starred_expression[ast_expr_t *] (inline):
    | '*' bitwise_or { a }
maybe_starred[ast_expr_t *]:
    | starred_expression
    | expression
starred_expressions[ast_list_t *]:
    | ','.maybe_starred+ [','] { a }

```c
static ast_expr_t *ast_conditional(
        ast_expr_t *cond, ast_expr_t *a, ast_expr_t *b) {
    return node();
}

static ast_named_t *ast_unnamed(ast_expr_t *expr) {
    return ast_named(NULL, expr);
}

static ast_expr_t *ast_comp_term(
        int comp_op, ast_expr_t *operand) {
    return node();
}

static ast_expr_t *ast_comparison(
        ast_expr_t *first, ast_list_t *terms) {
    return node();
}
```

named_expression[ast_named_t *]:
    | NAME ':=' expression >> { ast_named(%a, %b) }
    | expression { ast_unnamed(%a) }

conditional[ast_expr_t *] (inline):
    | 'if' disjunction '?' disjunction ':' expression
        { ast_conditional(%a, %b, %c) }

expression[ast_expr_t *]:
    | conditional { a }
    | disjunction { a }

```c
// Construct a binary operation
static ast_expr_t *ast_binary(ast_expr_t *left,
        ast_expr_t *right, enum expr_opcode binop_code) {
    ast_expr_t *r = palloc(sizeof(ast_expr_t));
    r->opcode = binop_code;
    r->left = left;
    r->right.expr = right;
    return r;
}

// Construct a unary operation
static ast_expr_t *ast_unary(ast_expr_t *expr,
        enum expr_opcode unary_opcode) {
    return ast_binary(expr, NULL, unary_opcode);
}
```

disjunction[ast_expr_t *] (left_recursive):
    | disjunction 'or' conjunction >>
        { ast_binary(%a, %b, LOGIC_OR) }
    | conjunction { a }
conjunction[ast_expr_t *] (left_recursive):
    | conjunction 'and' inversion >>
        { ast_binary(%a, %b, LOGIC_AND) }
    | inversion { a }
inversion[ast_expr_t *]:
    | 'not' inversion >>
        { ast_unary(%a, LOGIC_NOT) }
    | comparison { a }

comparison[ast_expr_t *]:
    | bitwise_or (comparator bitwise_or >> [ast_expr_t *]
            { ast_comp_term(%a, %b) })+ >>
        { ast_comparison(%a, %b) }
    | bitwise_or { a }
comparator[int] (inline):
    | '<' { CMP_LT }
    | '>' { CMP_GT }
    | '==' { CMP_EQ }
    | '>=' { CMP_GE }
    | '<=' { CMP_LE }
    | '!=' { CMP_NE }
    | 'in' { CMP_IN }
    | 'not' 'in' >> [int] { CMP_NI }
    | 'is' { CMP_IS }
    | 'is' 'not' >> [int] { CMP_NS }

bitwise_or[ast_expr_t *] (left_recursive):
    | bitwise_or '|' bitwise_xor >>
        { ast_binary(%a, %b, BINOP_IOR) }
    | bitwise_xor { a }
bitwise_xor[ast_expr_t *] (left_recursive):
    | bitwise_xor '^' bitwise_and >>
        { ast_binary(%a, %b, BINOP_XOR) }
    | bitwise_and { a }
bitwise_and[ast_expr_t *] (left_recursive):
    | bitwise_and '&' bitwise_shift >>
        { ast_binary(%a, %b, BINOP_AND) }
    | bitwise_shift { a }
bitwise_shift[ast_expr_t *] (left_recursive):
    | bitwise_shift '<<' sum >>
        { ast_binary(%a, %b, BINOP_SHL) }
    | bitwise_shift '>>' sum >>
        { ast_binary(%a, %b, BINOP_SHR) }
    | sum { a }

sum[ast_expr_t *] (left_recursive):
    | sum '+' term >>
        { ast_binary(%a, %b, BINOP_PLS) }
    | sum '-' term >>
        { ast_binary(%a, %b, BINOP_MIN) }
    | term { a }
term[ast_expr_t *] (left_recursive):
    | term '*' pipeline >>
        { ast_binary(%a, %b, BINOP_MUL) }
    | term '/' pipeline >>
        { ast_binary(%a, %b, BINOP_DIV) }
    | term '%' pipeline >>
        { ast_binary(%a, %b, BINOP_MOD) }
    | term '//' pipeline >>
        { ast_binary(%a, %b, BINOP_FDV) }
    | term '@' pipeline >>
        { ast_binary(%a, %b, BINOP_MML) }
    | pipeline { a }

pipeline[ast_expr_t *] (left_recursive):
    | pipeline '->' factor >>
        { ast_binary(%a, %b, BINOP_PIP) }
    | factor { a }

factor[ast_expr_t *] (memo):
    | '+' factor >> { ast_unary(%a, UNARY_PLS) }
    | '-' factor >> { ast_unary(%a, UNARY_MIN) }
    | '~' factor >> { ast_unary(%a, UNARY_INV) }
    | power { a }

```c
// Convert a primary to an expression
static ast_expr_t *ast_primary_expr(void *primary) {
    ast_expr_t *r = palloc(sizeof(ast_expr_t));
    r->opcode = BINOP_PRIMARY;
    r->left = NULL;
    r->right.primary = primary;
    return r;
}
```

power[ast_expr_t *] (memo):
    | primary '**' factor >>
        { ast_binary(ast_primary_expr(%a), %b, BINOP_POW) }
    | primary { ast_primary_expr(%a) }

primary[ast_primary_t *] (left_recursive):
    | primary '.' NAME >> { node() }
    | primary invocation >> { node() }
    | primary subscript >> { node() }
    | atom

# Parenthesized and list expressions

list_item:
    | starred_expression
    | named_expression
list_items[ast_list_t *]:
    | ','.list_item+ [','] { a }
paren_expression[ast_primary_t *] (inline):
    | '(' [list_items] ')'
list_expression[ast_primary_t *] (inline):
    | '[' [list_items] ']'

# Builder definitions
typed_parameter:
    | NAME [':' expression >> { a }]
builder_parameter:
    | typed_parameter ['=' expression >> { a }]
    | '*' typed_parameter >> { a }
    | '**' typed_parameter >> { a }
simple_parameter:
    | NAME ['=' expression >> { a }]
builder_parameters (inline):
    | '(' [','.builder_parameter+ [','] >> { a }] ')' { a }
builder_generics (inline):
    | '[' expressions ']' { a }

builder_expression[ast_primary_t *] (inline):
    | NAME [builder_generics] [builder_parameters] block_suite
    | NAME ','.simple_parameter+ ':' expression

```c
static ast_primary_t *ast_name_atom( token_t *name) {
    return node();
}

static ast_primary_t *ast_number_atom(token_t *number) {
    return node();
}

static ast_primary_t *ast_string_atom(token_t *string) {
    return node();
}

static ast_primary_t *ast_none() {
    return node();
}

static ast_primary_t *ast_true() {
    return node();
}

static ast_primary_t *ast_false() {
    return node();
}
```

atom[ast_primary_t *] (memo):
    | paren_expression
    | list_expression
    | builder_expression
    | NAME { ast_name_atom(%a) }
    | NUMBER { ast_number_atom(%a) }
    | STRING { ast_string_atom(%a) }
    | 'None' { ast_none() }
    | 'True' { ast_true() }
    | 'False' { ast_false() }

```c

// Provide the static parser struct
parser_t *get_static_parser() {
    return &__parser;
}

// Parser Entry Point
void *parse_grammar(int entry_point) {
    switch (entry_point) {
    case 0:
        return single_input();
    case 1:
        return file_input();
    case 2:
        return eval_input();
    default:
        return 0;
    }
}
```