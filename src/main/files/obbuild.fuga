/*
Object Builders

Builders are expressions that are used to build an object by declaring
it with a code object

Common builders:
- function
- class
- thread
- coroutine
- generator

Builders are analogous to a function, except they have special syntax
that automatically pass contextual information.

Builder syntax:

builder_suite:
    | ':' expr
    | block_suite

builder_expr:
    | NAME [func_type_hint] [func_args] func_suite

Compared with the old function syntax, builders just replaced
the set `def` with an arbitrary NAME.

A special case: the colon form is not allowed when the
parameter list is empty.
Allowed:
def x: pass
Not Allowed:
def: pass
Instead `def {}` must be used instead
*/

/*
1. Named builders
Builders can be named or anonymous, depending if it's is being
assigned to a name immediately when it's created.

e.g.
*/

# this function is being assigned to a name, so it's a named function
# printed as <function 'is_odd'>
is_odd = def num: num % 2 != 0

# this function is being passed to another expression. Here it's
# not a named function, printed as <function ?>
sorted([1,7,2], def x: -x)

/*
2. Type hints
Builder expressions can have type hints.

Only Allowed when there is a block
e.g.
*/

# specifies that the function returns an int
is_odd = def<int> num {
    return num % 2 != 0
}

/*
3. Function Parameters

A builder can make use of a parameter system.

Parameters have two forms.
The simple form does not require parentheses, it
can have parameter names and default-values

The complex form do require parentheses. In addition,
it allows type annotations, variable arguments, and
variable keyword arguments

The simple form and complex form are distinguished,
because in some cases it doesn't make sense to
allow names without parentheses, such as 'property self {}'
e.g.
*/

# Simple parameters with enum builders
Color = enum red, blue, green {}
Flags = enum x=1, y=2, z=3 {}

# Example of a dataclass builder
Person = dataclass(name: str, address: str) {}
# Extending the data class
PersonWithAge = Person + dataclass(age: int) {}
# Using the classes
a_person = Person("John", "123 Sesame Street")
same_person = PersonWithAge("John", "123 Sesame Street", 30)

# current grammar does not allow self to have paren around it
property self : __abs__(self)

/*
4. The code block

A builder always have a code block.
It is either a single expression, following a colon,
or a block surrounded by braces

The builder controls the scope of the block.
It can:
- allow or disallow non-local name lookups
- pre-inject variables into the local scope
- inspect the resulting block

the nonlocal keyword will allow names to be assigned
to a scope outside the builder, in addition to reading
it, if the builder allows that name to be accessed.

Return statements can be made inside blocks as well
*/

# an example block showing a function
fib = def(n) {
    if n <= 2: return 1
    # Recursion is ok here, because names are looked up
    # at runtime
    return fib(n - 1) + fib(n - 2)
}

# example showing a dataclass with methods
Point = dataclass(x:float, y: float) {
    __abs__ = def self {
        return math.hypot(self.x, self.y)
    }

    magnitude = property(self) {
        return __abs__(self)
    }

    angle = property(self) {
        return math.atan2(self.y, self.x)
    }
}


/*
Operator Precedence

Evaluated *first* just on the line of primary
*/

add = def a, b: a + b
# equals to
add = def a, b: (a + b)

# evaluates first
A = dataclass(a) + dataclass(b)

# do something to an expression after
# here the function is evaluated first
myLabel = Label() -> def lb {
    lb.text = "Hello World"
    lb.textsize = 18
}

# also evaluates last
myLabel = Label() -> def x: x + 1

# since a colon-delimited block parses expr,
# it may be necessary to put the builder
# inside parentheses
y = (def x: x * x)(12)

# the grammar does not allow arbitrary expressions
# as the builder, it must be a NAME
# therefore it's the most appropriate to
# make it an alternative to atom

# this would parse successfully
if b ? def x: x + 1 : def x: x - 1
# preferred
if b ? (def x: x + 1) : (def x: x - 1)

/*
Object Builder Syntax

Because many builders change the control flow of the program,
they are often part of the implementation intrinsics, and are
constructed using a native API.

There is a high-level API used to construct custom builders.
It is used in the associative source code

Example:
A simplified builder for enum
*/

from runtime import builder

enum = builder(name, types, args, code) {
    code.locals = {}
    code.eval()
}

/**
Native Interface
examples
*/

print_impl = jvm.compile(s: str) {
    return java.lang.System.out.print(s)
}

print = def(*args, end="\n") {
    return print_impl("".joint(args) + end)
}

_stdout_write = jvm.compile(s: str) {
    java_str = jvm.cast(s, jvm._java.lang.String)
    jvm._System.out.println(java_str)
}

_stdout = stdfile(read=None, write=_stdout_write)

print = def(*args, sep=" ", end="\n", file=None) {
    if not file: file = _stdout
    len = args.len
    if len {
        for i in range(len) {
            file.write(str(args[i]))
            if i != len - 1 {
                file.write(sep)
            }
        }
    }
    file.write(end)
}

/**
Proposal

Make parse tree available instead of function
e.g.
*/

A = matrix {
    (1,2,3) -> row[1]
    (4,5,6) -> row[2]
    (7,8,9) -> row[3]
}

# https://kotlinlang.org/docs/reference/type-safe-builders.html
html_text = build_html {
    head {
        title {+"XML encoding with ..."}
    }
    body {
        h1 {+"XML encoding with ..."}
        p  {+"this format can be used as an alternative markup to XML"}

        # an element with attributes and text content
        a(href = "...") {+"..."}

        # mixed content
        p {
            +"This is some"
            b {+"mixed"}
            +"text. For more see the"
            a(href = "...") {+"..."}
            +"project"
        }
        p {+"some text"}

        // content generated by
        p {
            for arg in args: +arg
        }
    }
} -> html_as_text

# Coroutines design

[1, 2, 3] -> [x * x for x] -> 3

# Recursion

fib = def n {
    if n <= 2: return 1
    return fib(n - 1) + fib(n - 2)
}

# Generator coroutine

fib_seq = def {
    a = 1
    b = 1
    while True {
        yield(a)
        a, b = b, a + b
    }
}


/*
Kw 1:
and
as
async
await
break
continue
def
else
except
finally
for
from
if
import
in
is
not
or
pass
raise
return
try
when
while

Kw 2:
False
None
True
array
class
complex
dict
enum
ext
filter
float
impl
int
list
map
print
property
protocol
range
self
str
sum
zip
dataclass
*/

