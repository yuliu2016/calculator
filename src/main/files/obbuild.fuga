# Coroutines design

[1, 2, 3] -> [x * x for x] -> 3

# Recursion

fib = def n {
    if n <= 2: return 1
    return fib(n - 1) + fib(n - 2)
}

# Generator coroutine

fib_seq = def {
    a = 1
    b = 1
    while True {
        yield(a)
        a, b = b, a + b
    }
}



/*
Object Builders

Builders are expressions that are used to build an object by declaring
it with a code object

Common builders:
- function
- class
- thread
- coroutine
- generator

Builders are analogous to a function, except they have special syntax
that automatically pass contextual information.

Builder syntax:

builder_suite:
    | ':' expr
    | block_suite

builder_expr:
    | NAME [func_type_hint] [func_args] func_suite

Compared with the old function syntax, builders just replaced
the set `def` with an arbitrary NAME

1. Named builders
Builders can be named or anonymous, depending if it's is being
assigned to a name immediately when it's created.

e.g.
is_odd = def num: num % 2 != 0
# the function is being assigned to a name, so it's a named function
# printed as <function 'is_odd'>

sorted([1,7,2], def x: -x)
# the function is being passed to another expression. Here it's
# not a named function, printed as <function ?>

2. Type hints
*/

is_odd = def num: num % 2 != 0
sorted([1,7,2], def x: -x)



# https://kotlinlang.org/docs/reference/type-safe-builders.html
html_text = build_html {
    head {
        title {+"XML encoding with ..."}
    }
    body {
        h1 {+"XML encoding with ..."}
        p  {+"this format can be used as an alternative markup to XML"}

        # an element with attributes and text content
        a(href = "...") {+"..."}

        # mixed content
        p {
            +"This is some"
            b {+"mixed"}
            +"text. For more see the"
            a(href = "...") {+"..."}
            +"project"
        }
        p {+"some text"}

        // content generated by
        p {
            for (arg in args)
                +arg
        }
    }
} -> html_as_text


