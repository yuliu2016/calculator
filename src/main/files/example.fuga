# This is a program written in Fuga


repeat = def(times, func) {
    for i in [0:times] {
        func()
    }
}

repeat(10) {
    print("Hello World")
}

Fruit = class {
    Apple, Orange, Pear, Banana
} -> enum()

Timekeeper = protocol {
    time: int
}

/TimekeeperImpl = class {
    import time
    import thread

    init {
        pass
    }

    impl(Timekeeper)

    time = property()
    time.get(() => int(time.time())
    time.did_set(old, new => print("The new time is ", new))

    /plus = def(other) {
        if class(other).is_impl(Timekeeper) {
            return self.time + other.time
        }
        return other + self
    } -> thread.mutex(self)
}

sum = def(iterable, initial_value=0) {
    sum_value = initial_value
    for elem in iterable {
        sum_value += elem
    }
    return sum_value
}

# Sum of numbers from 1 to 1000
[1:1001] -> sum()
range(1001) -> sum()

[1:1001] -> sum()

list = protocol {
    contract.default_impl_alias()

    T = contract.generic(mixed=True)

    append = def(item) {
        contract.mutate_self(type="grow")
        T.update_with(item)
    }

    __getitem__ = def(index) {
        contract.check_type(index, int)
        contract.maybe_out_of_range(index)
        contract.returns(type=T)
    }

    __setitem__ = def(index, item) {
        contract.check_type(index, int)
        contract.maybe_out_of_range(index)
        contract.mutate_self(type="set")
        T.update_with(item)
    }

    __len__ = def {
        contract.shallow_property()
        contract.object_size()
    }
}

class.impl_for(Timekeeper) # returns [TimekeeperImpl]

# definition for class
class = def(classdef, metaclass=ClassFactory) {
    return metaclass.create_class(classdef)
}

mul = def(x,y) { return x * y }
mul = def(x,y): return x * y
mul = def x, y: x * y
call(def x, y"" x * y)

/*
Pipe operator - precedence
*/

square = def<int> (x:int) : x * x
square = def<int> x: x * x

3 + 2 -> square() # 7
(3 + 2) -> square() # 25
2 ** 4 -> square() # 65534

[1,2,3].a -> [2,3].b

2 + 5 -> square()
-5 -> square()

# precedence is lower than power and factor, but higher than addition and multiplication


# Outer-scoped mutable names

def x {
    a = 0
    def y {
        a += 1 # this is an error

        # option 1
        nonlocal a
        a += 1

        # option 2
        &a += 1

        # option 3
        ^a += 4
        ^^*a = 5 # get two scopes up

        # option 4 - option 3 but require for read access too
    }
}

# decorators

@static
a = def x {
}

a = def x {
    print("Hello")
} -> static

@static
a = def x {
    print("Hello")
}

# Iterator idea
[1,2,3] -> (print(x) for x)

[1 for x in b for b](4)

[1,2,3] -> [x * x for x] -> list

a = [x*x for x]([1,2,3])
a = [1,2,3]
b = a -> [x*x for x] -> list
[x for x](t)

[3, 2, 1] -> sorted
a = [3, 2, 1] -> sorted(key=def x: x - 100) -> list
b = [1, 2, 3] -> [x * x for x] -> 3

[1,2,3] -> [print(x) for x] -> loop
a = /b = ()