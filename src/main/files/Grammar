# Grammar for Fuga

single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
file_input: (NEWLINE | stmt)* ENDMARKER
eval_input: exprlist NEWLINE* ENDMARKER

# Statements
stmt: (simple_stmt | compound_stmt) NEWLINE
simple_stmt: small_stmt (';' small_stmt)* [';']

# Small Statements
small_stmt:
    | 'pass'
    | 'break'
    | 'continue'
    | del_stmt
    | return_stmt
    | raise_stmt
    | nonlocal_stmt
    | assert_stmt
    | import_name
    | import_from
    | assignment

del_stmt: 'del' targetlist
return_stmt: 'return' [exprlist_star]
raise_stmt: 'raise' [expr ['from' expr]]
nonlocal_stmt: 'nonlocal' NAME (',' NAME)*
assert_stmt: 'assert' expr [',' expr]

expr_or_star: star_expr | expr
star_expr: '*' bitwise_or
exprlist_star: expr_or_star (',' expr_or_star)* [',']

assignment: ['/'] exprlist_star [annassign | ('=' exprlist_star)+ | augassign exprlist]
augassign: '+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//='
annassign: ':' expr ['=' exprlist_star]

import_name: 'import' dotted_as_names
import_from: 'from' import_from_names 'import' ('*' | '(' import_as_names [','] ')' | import_as_names)
import_from_names: '.'* dotted_name | '.'+
import_as_name: NAME ['as' NAME]
dotted_as_name: dotted_name ['as' NAME]
import_as_names: import_as_name (',' import_as_name)*
dotted_as_names: dotted_as_name (',' dotted_as_name)*
dotted_name: NAME ('.' NAME)*

# Compound statements

compound_stmt:
    | if_stmt
    | while_stmt
    | for_stmt
    | try_stmt
    | with_stmt

if_stmt: 'if' named_expr suite elif_stmt* [else_suite]
elif_stmt: 'elif' named_expr suite
while_stmt: 'while' named_expr suite [else_suite]
for_stmt: 'for' targetlist 'in' exprlist suite [else_suite]
try_stmt: 'try' suite (except_suite | finally_suite)
with_stmt: 'with' with_item (',' with_item)* suite

with_item: expr ['as' NAME]
except_clause: 'except' [expr ['as' NAME]]

block_suite:  '{' simple_stmt '}' | '{' NEWLINE stmt+ '}'
suite: ':' simple_stmt | block_suite
else_suite: 'else' suite
finally_suite: 'finally' suite
func_suite: ':' expr | block_suite
except_suite: (except_clause suite)+ [else_suite] [finally_suite]

# Function definitions

typed_arg_list: kwargs | args_kwargs | full_arg_list
full_arg_list: default_arg (','  default_arg)* [','  [kwargs | args_kwargs]]
args_kwargs: '*' [typed_arg] (','  default_arg)* [','  [kwargs]]
kwargs: '**' typed_arg [',']
default_arg: typed_arg ['=' expr]
typed_arg: NAME [':' expr]

simple_arg_list: simple_arg (simple_arg)*
simple_arg: NAME ['=' expr]

func_type_hint: '<' expr '>'
func_args: simple_arg_list | '(' [typed_arg_list] ')'
funcdef: 'def' [func_type_hint] [func_args] func_suite

# Expressions

named_expr: NAME ':=' expr | expr
conditional: 'if' disjunction '?' disjunction 'else' expr
expr: conditional | funcdef | disjunction
disjunction: conjunction ('or' conjunction)*
conjunction: inversion ('and' inversion)*
inversion: 'not' inversion | comparison
comparison: bitwise_or (comp_op bitwise_or)*
comp_op: '<'|'>'|'=='|'>='|'<='|'!='|'in'|'not' 'in'|'is'|'is' 'not'
bitwise_or: bitwise_xor ('|' bitwise_xor)*
bitwise_xor: bitwise_and ('^' bitwise_and)*
bitwise_and: shift_expr ('&' shift_expr)*
shift_op: '<<' | '>>'
shift_expr: sum (shift_op sum)*
sum_op: '+'|'-'
sum: term (sum_op term)*
term_op: '*'|'@'|'/'|'%'|'//'
term: pipeline (term_op pipeline)*
pipeline: factor ('->' pipe_expr)*
pipe_expr: pipe_for | factor

pipe_for: [comp_for] 'for' targetlist ['if' named_expr] [parameters | block_suite]
comp_for: 'for' targetlist 'in' disjunction [comp_iter]
comp_if: 'if' named_expr [comp_iter]
comp_iter: comp_for | comp_if

factor: ('+'|'-'|'~') factor | power
power: primary ['**' factor]

# Atoms

primary: atom trailer* [block_suite]
atom:
    | tuple_atom
    | list_atom
    | dict_or_set
    | NAME
    | NUMBER
    | STRING
    | 'None'
    | 'True'
    | 'False'

tuple_atom: '(' [named_expr_list] ')'
list_atom: '[' [named_expr_list] ']'
dict_or_set: '{' [dict_maker | set_maker] '}'

named_expr_star: star_expr | named_expr
named_expr_list: named_expr_star (',' named_expr_star)* [',']

trailer:
    | '.' NAME
    | parameters
    | subscript

subscript: '[' slicelist ']'
slicelist: slice (',' slice)* [',']
slice: [expr] slice_expr [slice_expr] | expr
slice_expr: ':' [expr]
parameters: '(' [arglist] ')'

target:
    | NAME
    | '(' targetlist ')'
    | '*' target
    | primary

targetlist: target (',' target)* [',']
exprlist: expr (',' expr)* [',']

dict_item: expr ':' expr | '**' bitwise_or
dict_maker: dict_item (',' dict_item)* [',']
set_maker: expr_or_star (',' expr_or_star)* [',']

arglist: argument (',' argument)*  [',']
argument:
    | NAME ':=' expr
    | NAME '=' expr
    | '**' expr
    | '*' expr
    | expr
